<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåê IDE Web Educativo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --gradient-bg-start: hsl(229, 84%, 71%);
            --gradient-bg-end: hsl(281, 39%, 55%);
            --gradient-primary-start: hsl(203, 89%, 53%);
            --gradient-primary-end: hsl(189, 69%, 54%);
            --gradient-success-start: hsl(122, 39%, 49%);
            --gradient-success-end: hsl(120, 40%, 44%);
            --gradient-danger-start: hsl(4, 90%, 58%);
            --gradient-danger-end: hsl(4, 63%, 47%);
            --gradient-warning-start: hsl(36, 100%, 50%);
            --gradient-warning-end: hsl(31, 100%, 47%);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, var(--gradient-bg-start), var(--gradient-bg-end));
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .header {
            background: linear-gradient(135deg, var(--gradient-primary-start), var(--gradient-primary-end));
            color: white;
            padding: 20px;
            text-align: center;
        }

        .header h1 { 
            font-size: 2.5em; 
            margin-bottom: 10px; 
        }
        
        .header p { 
            font-size: 1.1em; 
            opacity: 0.9; 
        }

        .status-indicator {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            text-center: center;
            font-size: 14px;
            padding: 8px 15px;
            margin: 10px auto;
            border-radius: 20px;
            font-weight: 500;
            max-width: 300px;
        }

        .control-panel {
            background: #f8f9fa;
            padding: 15px;
            border-bottom: 1px solid #e9ecef;
        }

        .control-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
            flex-wrap: wrap;
        }

        .panel-controls {
            display: flex;
            gap: 20px;
            align-items: center;
            flex-wrap: wrap;
        }

        .control-group {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .control-group label {
            font-size: 14px;
            font-weight: 500;
            color: #495057;
            min-width: 60px;
        }

        .control-group input[type="range"] {
            width: 80px;
            accent-color: var(--gradient-primary-start);
        }

        .control-group .value-display {
            font-size: 12px;
            color: #6c757d;
            min-width: 40px;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn {
            color: white;
            border: none;
            padding: 12px 20px;
            font-size: 14px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            white-space: nowrap;
            font-weight: 500;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0,0,0,0.2);
        }

        .btn:disabled {
            background: #cccccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-success {
            background: linear-gradient(135deg, var(--gradient-success-start), var(--gradient-success-end));
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--gradient-danger-start), var(--gradient-danger-end));
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--gradient-warning-start), var(--gradient-warning-end));
        }

        .main-content {
            display: grid;
            grid-template-columns: var(--examples-width, 300px) var(--editor-width, 1fr) var(--preview-width, 1fr);
            gap: 20px;
            padding: 20px;
            min-height: 600px;
        }

        .panel {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 15px;
            border: 2px solid #e9ecef;
        }

        .panel h3 {
            color: #495057;
            margin-bottom: 15px;
            font-size: 1.2em;
        }

        .examples-panel .example-item {
            background: white;
            padding: 12px;
            margin-bottom: 10px;
            border-radius: 8px;
            cursor: pointer;
            border: 1px solid #dee2e6;
            transition: all 0.3s ease;
        }

        .examples-panel .example-item:hover {
            background: #e3f2fd;
            border-color: var(--gradient-primary-start);
            transform: translateY(-2px);
        }

        .example-item h4 {
            color: var(--gradient-primary-start);
            font-size: 0.9em;
            margin-bottom: 5px;
        }

        .example-item p {
            color: #6c757d;
            font-size: 0.8em;
            line-height: 1.4;
        }

        .example-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 8px;
        }

        .category-badge {
            background: #e9ecef;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.7em;
            color: #495057;
        }

        .difficulty {
            font-size: 0.7em;
            color: #6c757d;
        }

        .code-tabs {
            display: flex;
            border-bottom: 2px solid #e9ecef;
            margin-bottom: 15px;
        }

        .tab-button {
            background: none;
            border: none;
            padding: 10px 20px;
            cursor: pointer;
            border-bottom: 2px solid transparent;
            transition: all 0.3s ease;
            font-size: 14px;
            font-weight: 500;
        }

        .tab-button.active {
            color: var(--gradient-primary-start);
            border-bottom-color: var(--gradient-primary-start);
            background: rgba(33, 150, 243, 0.1);
        }

        .tab-button:hover {
            background: rgba(33, 150, 243, 0.05);
        }

        .code-editor {
            width: 100%;
            height: 400px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            padding: 15px;
            resize: none;
            background: #ffffff;
            color: #212529;
            line-height: 1.5;
        }

        .code-editor:focus {
            outline: none;
            border-color: var(--gradient-primary-start);
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }

        .editor-actions {
            margin-top: 10px;
            display: flex;
            gap: 10px;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 12px;
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .btn-small:hover {
            background: #5a6268;
        }

        .preview-panel {
            background: #1a1a1a;
            border-radius: 10px;
            padding: 15px;
            border: 2px solid #333;
        }

        .preview-panel h3 { 
            color: #ffffff; 
            margin-bottom: 15px; 
        }

        .preview-frame {
            width: 100%;
            height: 400px;
            border: 2px solid var(--gradient-primary-start);
            border-radius: 8px;
            background: white;
        }

        .preview-controls {
            margin-top: 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .preview-buttons {
            display: flex;
            gap: 8px;
        }

        .btn-preview {
            background: #333;
            color: white;
            border: 1px solid #555;
            padding: 6px 12px;
            font-size: 12px;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.3s ease;
        }

        .btn-preview:hover {
            background: #555;
        }

        .preview-status {
            color: #ccc;
            font-size: 12px;
        }

        .console-section {
            margin-top: 15px;
        }

        .console-section h4 {
            color: white;
            font-size: 14px;
            margin-bottom: 8px;
        }

        .console-output {
            background: #000;
            color: #00ff00;
            font-family: 'Courier New', monospace;
            padding: 10px;
            height: 120px;
            border-radius: 6px;
            overflow-y: auto;
            font-size: 12px;
            line-height: 1.4;
        }

        .console-empty {
            color: #666;
        }

        .educational-tips {
            background: #e3f2fd;
            border-top: 2px solid #bbdefb;
            padding: 20px;
        }

        .tips-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 15px;
        }

        .tip-card {
            background: white;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid var(--gradient-primary-start);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .tip-card h4 {
            color: var(--gradient-primary-start);
            margin-bottom: 8px;
            font-size: 14px;
        }

        .tip-card p {
            color: #555;
            font-size: 13px;
            line-height: 1.4;
        }

        .footer {
            text-align: center;
            color: rgba(255,255,255,0.9);
            margin-top: 20px;
            padding: 15px;
            font-size: 14px;
        }

        @media (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr;
                grid-template-rows: auto auto auto;
            }

            .control-row {
                flex-direction: column;
                align-items: stretch;
            }

            .panel-controls {
                justify-content: center;
            }

            .action-buttons {
                justify-content: center;
            }
        }

        @media (max-width: 768px) {
            .code-editor, .preview-frame {
                height: 250px;
            }

            .console-output {
                height: 80px;
            }

            .tips-grid {
                grid-template-columns: 1fr;
            }

            .btn {
                padding: 10px 16px;
                font-size: 13px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>üåê IDE Web Educativo</h1>
            <p>Aprende HTML, CSS y JavaScript directamente en tu navegador</p>
            <div class="status-indicator">
                <span>‚úÖ Editor listo para programar</span>
            </div>
        </header>

        <div class="control-panel">
            <div class="control-row">
                <div class="panel-controls">
                    <div class="control-group">
                        <label>Ejemplos:</label>
                        <input type="range" id="examples-width" min="200" max="500" value="300">
                        <span class="value-display" id="examples-display">300px</span>
                    </div>
                    <div class="control-group">
                        <label>Editor:</label>
                        <input type="range" id="editor-width" min="1" max="3" step="0.1" value="1.2">
                        <span class="value-display" id="editor-display">1.2fr</span>
                    </div>
                    <div class="control-group">
                        <label>Vista:</label>
                        <input type="range" id="preview-width" min="1" max="3" step="0.1" value="1">
                        <span class="value-display" id="preview-display">1fr</span>
                    </div>
                </div>
                
                <div class="action-buttons">
                    <button class="btn btn-success" onclick="runCode()">
                        ‚ñ∂Ô∏è Ejecutar
                    </button>
                    <button class="btn btn-danger" onclick="clearCode()">
                        üóëÔ∏è Limpiar
                    </button>
                    <button class="btn btn-warning" onclick="downloadProject()">
                        üíæ Descargar
                    </button>
                </div>
            </div>
        </div>

        <main class="main-content">
            <!-- Examples Panel -->
            <section class="panel examples-panel">
                <h3>üìö Ejemplos Educativos</h3>
                <div id="examples-list"></div>
            </section>

            <!-- Code Editor Panel -->
            <section class="panel editor-panel">
                <h3>üíª Editor de C√≥digo</h3>
                
                <div class="code-tabs">
                    <button class="tab-button active" onclick="switchTab('html')">HTML</button>
                    <button class="tab-button" onclick="switchTab('css')">CSS</button>
                    <button class="tab-button" onclick="switchTab('js')">JavaScript</button>
                </div>

                <textarea 
                    id="code-editor" 
                    class="code-editor" 
                    placeholder="<!-- Escribe tu c√≥digo HTML aqu√≠ -->"
                ></textarea>

                <div class="editor-actions">
                    <button class="btn-small" onclick="formatCode()">üîß Formatear</button>
                    <button class="btn-small" onclick="validateCode()">‚úÖ Validar</button>
                </div>
            </section>

            <!-- Live Preview Panel -->
            <section class="panel preview-panel">
                <h3>üåê Vista Previa en Vivo</h3>
                
                <iframe 
                    id="preview-frame" 
                    class="preview-frame"
                    title="Vista previa del c√≥digo"
                ></iframe>

                <div class="preview-controls">
                    <div class="preview-buttons">
                        <button class="btn-preview" onclick="refreshPreview()">üîÑ Actualizar</button>
                        <button class="btn-preview" onclick="openInNewTab()">üîó Nueva pesta√±a</button>
                    </div>
                    <div class="preview-status">
                        √öltima actualizaci√≥n: <span id="last-update">--:--:--</span>
                    </div>
                </div>

                <div class="console-section">
                    <h4>üñ•Ô∏è Consola</h4>
                    <div id="console-output" class="console-output">
                        <div class="console-empty">Consola vac√≠a - ejecuta c√≥digo JavaScript para ver la salida</div>
                    </div>
                </div>
            </section>
        </main>

        <section class="educational-tips">
            <div class="tips-grid">
                <div class="tip-card">
                    <h4>üí° Tip del d√≠a</h4>
                    <p>Usa console.log() para depurar tu c√≥digo JavaScript y ver valores en la consola.</p>
                </div>
                <div class="tip-card">
                    <h4>üé® Dise√±o</h4>
                    <p>Experimenta con CSS Grid y Flexbox para crear layouts responsivos y modernos.</p>
                </div>
                <div class="tip-card">
                    <h4>üöÄ Proyecto</h4>
                    <p>Combina HTML, CSS y JavaScript para crear una calculadora interactiva.</p>
                </div>
            </div>
        </section>
    </div>

    <footer class="footer">
        <p>üåê IDE Web Educativo - Aprende desarrollo web paso a paso</p>
    </footer>

    <script>
        // State management
        let currentTab = 'html';
        let codeData = {
            html: `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Primera P√°gina</title>
</head>
<body>
    <h1>¬°Hola Mundo!</h1>
    <p>Esta es mi primera p√°gina web.</p>
    <p>Haz clic en el t√≠tulo para cambiar su color.</p>
</body>
</html>`,
            css: `body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    text-align: center;
}

h1 {
    font-size: 2.5em;
    margin-bottom: 20px;
    cursor: pointer;
    transition: color 0.3s ease;
}

h1:hover {
    color: #ffeb3b;
}

p {
    font-size: 1.2em;
    line-height: 1.6;
}`,
            js: `document.addEventListener('DOMContentLoaded', function() {
    const h1 = document.querySelector('h1');
    
    h1.addEventListener('click', function() {
        h1.style.color = h1.style.color === 'yellow' ? 'white' : 'yellow';
    });
    
    console.log('¬°JavaScript cargado correctamente!');
    console.log('Haz clic en el t√≠tulo para cambiar su color');
});`
        };

        let consoleMessages = [];

        // Example data
        const examples = [
            {
                id: 'html-basic',
                title: 'üèóÔ∏è HTML B√°sico',
                description: 'Estructura b√°sica de una p√°gina web con etiquetas fundamentales',
                category: 'html',
                difficulty: 'principiante',
                html: `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Primera P√°gina</title>
</head>
<body>
    <h1>¬°Hola Mundo!</h1>
    <p>Esta es mi primera p√°gina web.</p>
    <p>Aqu√≠ puedo escribir cualquier contenido que quiera mostrar.</p>
</body>
</html>`,
                css: `body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
}

h1 {
    text-align: center;
    font-size: 2.5em;
    margin-bottom: 20px;
}

p {
    font-size: 1.2em;
    line-height: 1.6;
    text-align: center;
}`,
                js: `console.log('¬°Hola desde JavaScript!');

document.addEventListener('DOMContentLoaded', function() {
    console.log('P√°gina cargada correctamente');
});`
            },
            {
                id: 'forms',
                title: 'üìù Formularios HTML',
                description: 'Creaci√≥n de formularios interactivos con validaci√≥n',
                category: 'html',
                difficulty: 'intermedio',
                html: `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Formulario de Contacto</title>
</head>
<body>
    <div class="container">
        <h1>Formulario de Contacto</h1>
        <form id="contactForm">
            <div class="form-group">
                <label for="nombre">Nombre:</label>
                <input type="text" id="nombre" name="nombre" required>
            </div>
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="mensaje">Mensaje:</label>
                <textarea id="mensaje" name="mensaje" rows="5" required></textarea>
            </div>
            <button type="submit">Enviar</button>
        </form>
        <div id="resultado"></div>
    </div>
</body>
</html>`,
                css: `.container {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    font-family: Arial, sans-serif;
}

h1 {
    text-align: center;
    color: #333;
    margin-bottom: 30px;
}

.form-group {
    margin-bottom: 20px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #555;
}

input, textarea {
    width: 100%;
    padding: 10px;
    border: 2px solid #ddd;
    border-radius: 5px;
    font-size: 16px;
    transition: border-color 0.3s;
}

input:focus, textarea:focus {
    outline: none;
    border-color: #2196F3;
}

button {
    background: linear-gradient(135deg, #2196F3, #21CBF3);
    color: white;
    padding: 12px 30px;
    border: none;
    border-radius: 25px;
    font-size: 16px;
    cursor: pointer;
    transition: transform 0.2s;
}

button:hover {
    transform: translateY(-2px);
}

#resultado {
    margin-top: 20px;
    padding: 10px;
    border-radius: 5px;
    display: none;
}

.exito {
    background: #d4edda;
    color: #155724;
    border: 1px solid #c3e6cb;
}`,
                js: `document.getElementById('contactForm').addEventListener('submit', function(e) {
    e.preventDefault();
    
    const nombre = document.getElementById('nombre').value;
    const email = document.getElementById('email').value;
    const mensaje = document.getElementById('mensaje').value;
    const resultado = document.getElementById('resultado');
    
    if (nombre && email && mensaje) {
        resultado.innerHTML = '¬°Mensaje enviado correctamente! Gracias ' + nombre + '.';
        resultado.className = 'exito';
        resultado.style.display = 'block';
        
        // Limpiar formulario
        this.reset();
        
        console.log('Formulario enviado:', { nombre, email, mensaje });
    }
});`
            },
            {
                id: 'flexbox',
                title: 'üé® CSS Flexbox',
                description: 'Dise√±o de layouts responsivos con Flexbox',
                category: 'css',
                difficulty: 'intermedio',
                html: `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Layout con Flexbox</title>
</head>
<body>
    <header class="header">
        <h1>Mi Sitio Web</h1>
        <nav class="nav">
            <a href="#inicio">Inicio</a>
            <a href="#sobre">Sobre</a>
            <a href="#contacto">Contacto</a>
        </nav>
    </header>
    
    <main class="main">
        <section class="hero">
            <h2>Bienvenido a mi sitio</h2>
            <p>Dise√±o responsivo con Flexbox</p>
        </section>
        
        <section class="cards">
            <div class="card">
                <h3>Tarjeta 1</h3>
                <p>Contenido de la primera tarjeta</p>
            </div>
            <div class="card">
                <h3>Tarjeta 2</h3>
                <p>Contenido de la segunda tarjeta</p>
            </div>
            <div class="card">
                <h3>Tarjeta 3</h3>
                <p>Contenido de la tercera tarjeta</p>
            </div>
        </section>
    </main>
    
    <footer class="footer">
        <p>&copy; 2024 Mi Sitio Web</p>
    </footer>
</body>
</html>`,
                css: `* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.header {
    background: linear-gradient(135deg, #2196F3, #21CBF3);
    color: white;
    padding: 1rem 2rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
}

.nav {
    display: flex;
    gap: 2rem;
}

.nav a {
    color: white;
    text-decoration: none;
    transition: opacity 0.3s;
}

.nav a:hover {
    opacity: 0.8;
}

.main {
    flex: 1;
    padding: 2rem;
}

.hero {
    text-align: center;
    padding: 3rem 0;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
    border-radius: 10px;
    margin-bottom: 2rem;
}

.hero h2 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
}

.cards {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
    justify-content: center;
}

.card {
    background: white;
    padding: 2rem;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    flex: 1;
    min-width: 250px;
    max-width: 300px;
    transition: transform 0.3s;
}

.card:hover {
    transform: translateY(-5px);
}

.card h3 {
    color: #2196F3;
    margin-bottom: 1rem;
}

.footer {
    background: #333;
    color: white;
    text-align: center;
    padding: 1rem;
}

@media (max-width: 768px) {
    .header {
        flex-direction: column;
        gap: 1rem;
    }
    
    .nav {
        flex-wrap: wrap;
        justify-content: center;
    }
    
    .hero h2 {
        font-size: 2rem;
    }
    
    .cards {
        flex-direction: column;
        align-items: center;
    }
}`,
                js: `// Efecto suave al hacer scroll
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        console.log('Navegando a:', this.getAttribute('href'));
    });
});

// Animaci√≥n de las tarjetas al cargar
document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'all 0.5s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 200);
    });
    
    console.log('P√°gina cargada - animaciones iniciadas');
});`
            },
            {
                id: 'animations',
                title: '‚ú® Animaciones CSS',
                description: 'Efectos visuales y transiciones suaves',
                category: 'css',
                difficulty: 'avanzado',
                html: `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Animaciones CSS</title>
</head>
<body>
    <div class="container">
        <h1 class="titulo-animado">Animaciones CSS</h1>
        
        <div class="botones">
            <button class="btn btn-bounce">Rebote</button>
            <button class="btn btn-shake">Vibrar</button>
            <button class="btn btn-rotate">Rotar</button>
            <button class="btn btn-pulse">Pulso</button>
        </div>
        
        <div class="caja-animada">
            <div class="circulo"></div>
        </div>
        
        <div class="loading">
            <div class="punto"></div>
            <div class="punto"></div>
            <div class="punto"></div>
        </div>
    </div>
</body>
</html>`,
                css: `@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translateY(-30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes bounce {
    0%, 20%, 60%, 100% {
        transform: translateY(0);
    }
    40% {
        transform: translateY(-30px);
    }
    80% {
        transform: translateY(-15px);
    }
}

@keyframes shake {
    0%, 100% { transform: translateX(0); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }
    20%, 40%, 60%, 80% { transform: translateX(10px); }
}

@keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

@keyframes wave {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
}

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background: linear-gradient(135deg, #667eea, #764ba2);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.container {
    text-align: center;
    background: rgba(255, 255, 255, 0.9);
    padding: 2rem;
    border-radius: 20px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
}

.titulo-animado {
    color: #2196F3;
    font-size: 2.5rem;
    margin-bottom: 2rem;
    animation: fadeInDown 1s ease-out;
}

.botones {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 2rem;
}

.btn {
    padding: 12px 24px;
    border: none;
    border-radius: 25px;
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, #2196F3, #21CBF3);
    color: white;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(33, 150, 243, 0.4);
}

.btn-bounce:hover {
    animation: bounce 1s infinite;
}

.btn-shake:hover {
    animation: shake 0.5s infinite;
}

.btn-rotate:hover {
    animation: rotate 2s infinite linear;
}

.btn-pulse:hover {
    animation: pulse 1s infinite;
}

.caja-animada {
    margin: 2rem auto;
    width: 200px;
    height: 200px;
    background: linear-gradient(45deg, #FF6B6B, #4ECDC4);
    border-radius: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
}

.caja-animada:hover {
    transform: scale(1.1) rotate(5deg);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.3);
}

.circulo {
    width: 80px;
    height: 80px;
    background: white;
    border-radius: 50%;
    animation: pulse 2s infinite;
}

.loading {
    display: flex;
    gap: 10px;
    justify-content: center;
    margin-top: 2rem;
}

.punto {
    width: 20px;
    height: 20px;
    background: #2196F3;
    border-radius: 50%;
    animation: wave 1.4s infinite ease-in-out;
}

.punto:nth-child(2) {
    animation-delay: 0.2s;
}

.punto:nth-child(3) {
    animation-delay: 0.4s;
}`,
                js: `document.addEventListener('DOMContentLoaded', function() {
    // Agregar efectos de sonido simulados
    const botones = document.querySelectorAll('.btn');
    
    botones.forEach(boton => {
        boton.addEventListener('click', function() {
            console.log('Efecto de sonido: ' + this.textContent);
        });
    });
    
    console.log('Animaciones CSS cargadas correctamente');
});`
            },
            {
                id: 'js-basic',
                title: '‚ö° JavaScript B√°sico',
                description: 'Variables, funciones y manipulaci√≥n del DOM',
                category: 'javascript',
                difficulty: 'principiante',
                html: `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JavaScript B√°sico</title>
</head>
<body>
    <div class="container">
        <h1>Aprendiendo JavaScript</h1>
        
        <div class="section">
            <h2>Contador Interactivo</h2>
            <p>Contador: <span id="contador">0</span></p>
            <button id="incrementar">Incrementar</button>
            <button id="decrementar">Decrementar</button>
            <button id="reset">Reset</button>
        </div>
        
        <div class="section">
            <h2>Cambiar Colores</h2>
            <button id="cambiar-color">Cambiar Color de Fondo</button>
        </div>
        
        <div class="section">
            <h2>Hora Actual</h2>
            <p id="reloj">--:--:--</p>
        </div>
    </div>
</body>
</html>`,
                css: `body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background: linear-gradient(135deg, #74b9ff, #0984e3);
    color: white;
    transition: background 0.5s ease;
}

.container {
    max-width: 600px;
    margin: 0 auto;
    background: rgba(255, 255, 255, 0.1);
    padding: 30px;
    border-radius: 15px;
    backdrop-filter: blur(10px);
}

h1 {
    text-align: center;
    margin-bottom: 30px;
}

.section {
    margin-bottom: 30px;
    padding: 20px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
}

h2 {
    color: #fff;
    margin-bottom: 15px;
}

button {
    background: #00b894;
    color: white;
    border: none;
    padding: 10px 20px;
    margin: 5px;
    border-radius: 25px;
    cursor: pointer;
    transition: all 0.3s ease;
}

button:hover {
    background: #00a085;
    transform: translateY(-2px);
}

#contador {
    font-size: 2em;
    font-weight: bold;
    color: #fdcb6e;
}

#reloj {
    font-size: 1.5em;
    font-weight: bold;
    color: #fdcb6e;
}`,
                js: `// Variables globales
let contador = 0;
const colores = ['#74b9ff', '#fd79a8', '#fdcb6e', '#00b894', '#e17055'];
let colorIndex = 0;

// Funci√≥n para actualizar el contador
function actualizarContador() {
    document.getElementById('contador').textContent = contador;
    console.log('Contador actualizado:', contador);
}

// Funci√≥n para cambiar color de fondo
function cambiarColor() {
    colorIndex = (colorIndex + 1) % colores.length;
    const nuevoColor = colores[colorIndex];
    document.body.style.background = \`linear-gradient(135deg, \${nuevoColor}, \${nuevoColor}99)\`;
    console.log('Color cambiado a:', nuevoColor);
}

// Funci√≥n para actualizar el reloj
function actualizarReloj() {
    const ahora = new Date();
    const tiempo = ahora.toLocaleTimeString();
    document.getElementById('reloj').textContent = tiempo;
}

// Event listeners cuando el DOM est√© listo
document.addEventListener('DOMContentLoaded', function() {
    // Botones del contador
    document.getElementById('incrementar').addEventListener('click', function() {
        contador++;
        actualizarContador();
    });
    
    document.getElementById('decrementar').addEventListener('click', function() {
        contador--;
        actualizarContador();
    });
    
    document.getElementById('reset').addEventListener('click', function() {
        contador = 0;
        actualizarContador();
    });
    
    // Bot√≥n cambiar color
    document.getElementById('cambiar-color').addEventListener('click', cambiarColor);
    
    // Inicializar reloj y actualizarlo cada segundo
    actualizarReloj();
    setInterval(actualizarReloj, 1000);
    
    console.log('JavaScript b√°sico cargado correctamente');
    console.log('Prueba los botones para ver la interactividad');
});`
            }
        ];

        // Initialize the application
        function init() {
            loadExamples();
            setupPanelControls();
            switchTab('html');
            updatePreview();
            setupConsoleCapture();
        }

        // Load examples into the panel
        function loadExamples() {
            const examplesList = document.getElementById('examples-list');
            examplesList.innerHTML = '';

            examples.forEach(example => {
                const exampleDiv = document.createElement('div');
                exampleDiv.className = 'example-item';
                exampleDiv.onclick = () => loadExample(example);
                
                exampleDiv.innerHTML = `
                    <h4>${example.title}</h4>
                    <p>${example.description}</p>
                    <div class="example-meta">
                        <span class="category-badge">${example.category}</span>
                        <span class="difficulty">${example.difficulty}</span>
                    </div>
                `;
                
                examplesList.appendChild(exampleDiv);
            });
        }

        // Load an example into the editor
        function loadExample(example) {
            codeData.html = example.html;
            codeData.css = example.css;
            codeData.js = example.js;
            
            updateEditor();
            updatePreview();
            addConsoleMessage('info', `Ejemplo cargado: ${example.title}`);
        }

        // Setup panel width controls
        function setupPanelControls() {
            const examplesSlider = document.getElementById('examples-width');
            const editorSlider = document.getElementById('editor-width');
            const previewSlider = document.getElementById('preview-width');

            examplesSlider.addEventListener('input', function() {
                updatePanelWidth('examples', this.value + 'px');
                document.getElementById('examples-display').textContent = this.value + 'px';
            });

            editorSlider.addEventListener('input', function() {
                updatePanelWidth('editor', this.value + 'fr');
                document.getElementById('editor-display').textContent = this.value + 'fr';
            });

            previewSlider.addEventListener('input', function() {
                updatePanelWidth('preview', this.value + 'fr');
                document.getElementById('preview-display').textContent = this.value + 'fr';
            });
        }

        // Update panel widths
        function updatePanelWidth(panel, value) {
            const mainContent = document.querySelector('.main-content');
            const currentStyle = mainContent.style.gridTemplateColumns || '300px 1.2fr 1fr';
            const parts = currentStyle.split(' ');
            
            switch(panel) {
                case 'examples':
                    parts[0] = value;
                    break;
                case 'editor':
                    parts[1] = value;
                    break;
                case 'preview':
                    parts[2] = value;
                    break;
            }
            
            mainContent.style.gridTemplateColumns = parts.join(' ');
        }

        // Switch between code tabs
        function switchTab(tab) {
            // Save current code
            const editor = document.getElementById('code-editor');
            codeData[currentTab] = editor.value;

            // Update current tab
            currentTab = tab;

            // Update tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });
            event.target.classList.add('active');

            // Update editor content and placeholder
            updateEditor();
        }

        // Update editor content
        function updateEditor() {
            const editor = document.getElementById('code-editor');
            editor.value = codeData[currentTab];

            const placeholders = {
                html: '<!-- Escribe tu c√≥digo HTML aqu√≠ -->',
                css: '/* Escribe tu c√≥digo CSS aqu√≠ */',
                js: '// Escribe tu c√≥digo JavaScript aqu√≠'
            };

            editor.placeholder = placeholders[currentTab];
        }

        // Save code when typing
        document.addEventListener('DOMContentLoaded', function() {
            const editor = document.getElementById('code-editor');
            editor.addEventListener('input', function() {
                codeData[currentTab] = this.value;
                // Auto-update preview after 1 second of no typing
                clearTimeout(window.updateTimer);
                window.updateTimer = setTimeout(updatePreview, 1000);
            });
        });

        // Update live preview
        function updatePreview() {
            const iframe = document.getElementById('preview-frame');
            
            const combinedCode = `
                <!DOCTYPE html>
                <html lang="es">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Vista Previa</title>
                    <style>${codeData.css}</style>
                </head>
                <body>
                    ${codeData.html}
                    <script>
                        // Override console methods to capture output
                        (function() {
                            const originalLog = console.log;
                            const originalError = console.error;
                            const originalWarn = console.warn;
                            
                            console.log = function(...args) {
                                originalLog.apply(console, args);
                                window.parent.postMessage({
                                    type: 'console',
                                    level: 'log',
                                    args: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg))
                                }, '*');
                            };
                            
                            console.error = function(...args) {
                                originalError.apply(console, args);
                                window.parent.postMessage({
                                    type: 'console',
                                    level: 'error',
                                    args: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg))
                                }, '*');
                            };
                            
                            console.warn = function(...args) {
                                originalWarn.apply(console, args);
                                window.parent.postMessage({
                                    type: 'console',
                                    level: 'warn',
                                    args: args.map(arg => typeof arg === 'object' ? JSON.stringify(arg) : String(arg))
                                }, '*');
                            };
                            
                            // Catch runtime errors
                            window.addEventListener('error', function(e) {
                                window.parent.postMessage({
                                    type: 'console',
                                    level: 'error',
                                    args: [e.message + ' (l√≠nea ' + e.lineno + ')']
                                }, '*');
                            });
                        })();
                        
                        ${codeData.js}
                    </script>
                </body>
                </html>
            `;

            iframe.srcdoc = combinedCode;
            updateLastUpdateTime();
        }

        // Setup console message capture
        function setupConsoleCapture() {
            window.addEventListener('message', function(event) {
                if (event.data.type === 'console') {
                    const { level, args } = event.data;
                    const message = args.join(' ');
                    addConsoleMessage(level, message);
                }
            });
        }

        // Add message to console
        function addConsoleMessage(level, message) {
            const timestamp = new Date().toLocaleTimeString();
            const formattedMessage = `[${timestamp}] ${level}: ${message}`;
            
            consoleMessages.push(formattedMessage);
            if (consoleMessages.length > 50) {
                consoleMessages.shift();
            }
            
            updateConsoleDisplay();
        }

        // Update console display
        function updateConsoleDisplay() {
            const consoleOutput = document.getElementById('console-output');
            
            if (consoleMessages.length === 0) {
                consoleOutput.innerHTML = '<div class="console-empty">Consola vac√≠a - ejecuta c√≥digo JavaScript para ver la salida</div>';
            } else {
                consoleOutput.innerHTML = consoleMessages
                    .slice(-20) // Show only last 20 messages
                    .map(msg => `<div>${msg}</div>`)
                    .join('');
                consoleOutput.scrollTop = consoleOutput.scrollHeight;
            }
        }

        // Update last update time
        function updateLastUpdateTime() {
            document.getElementById('last-update').textContent = new Date().toLocaleTimeString();
        }

        // Action functions
        function runCode() {
            updatePreview();
            addConsoleMessage('info', 'Vista previa actualizada');
        }

        function clearCode() {
            if (confirm('¬øEst√°s seguro de que quieres limpiar todo el c√≥digo?')) {
                codeData.html = '';
                codeData.css = '';
                codeData.js = '';
                updateEditor();
                updatePreview();
                consoleMessages = [];
                updateConsoleDisplay();
                addConsoleMessage('info', 'C√≥digo limpiado');
            }
        }

        function downloadProject() {
            try {
                const completeHtml = `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mi Proyecto Web</title>
    <style>
${codeData.css}
    </style>
</head>
<body>
${codeData.html}
    <script>
${codeData.js}
    </script>
</body>
</html>`;

                const blob = new Blob([completeHtml], { type: 'text/html;charset=utf-8' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = `mi-proyecto-web-${new Date().toISOString().split('T')[0]}.html`;
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);

                addConsoleMessage('info', 'Proyecto descargado correctamente');
            } catch (error) {
                addConsoleMessage('error', 'Error al descargar el proyecto');
            }
        }

        function refreshPreview() {
            updatePreview();
            addConsoleMessage('info', 'Vista previa actualizada manualmente');
        }

        function openInNewTab() {
            const combinedCode = `
                <!DOCTYPE html>
                <html lang="es">
                <head>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <title>Vista Previa</title>
                    <style>${codeData.css}</style>
                </head>
                <body>
                    ${codeData.html}
                    <script>${codeData.js}</script>
                </body>
                </html>
            `;

            const blob = new Blob([combinedCode], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            window.open(url, '_blank');
            setTimeout(() => URL.revokeObjectURL(url), 1000);
        }

        function formatCode() {
            // Simple code formatting
            let code = codeData[currentTab];
            
            if (currentTab === 'html') {
                // Basic HTML formatting
                code = code.replace(/></g, '>\n<').replace(/^\s+/gm, '');
            } else if (currentTab === 'css') {
                // Basic CSS formatting
                code = code.replace(/\{/g, ' {\n    ').replace(/\}/g, '\n}\n').replace(/;/g, ';\n    ');
            }
            
            codeData[currentTab] = code;
            updateEditor();
            addConsoleMessage('info', `C√≥digo ${currentTab.toUpperCase()} formateado`);
        }

        function validateCode() {
            const code = codeData[currentTab];
            let isValid = true;
            let message = `C√≥digo ${currentTab.toUpperCase()} v√°lido ‚úÖ`;

            if (currentTab === 'html') {
                const openTags = (code.match(/<[^\/][^>]*>/g) || []).length;
                const closeTags = (code.match(/<\/[^>]*>/g) || []).length;
                if (openTags !== closeTags) {
                    isValid = false;
                    message = 'Etiquetas HTML no balanceadas ‚ùå';
                }
            } else if (currentTab === 'css') {
                const openBraces = (code.match(/{/g) || []).length;
                const closeBraces = (code.match(/}/g) || []).length;
                if (openBraces !== closeBraces) {
                    isValid = false;
                    message = 'Llaves CSS no balanceadas ‚ùå';
                }
            } else if (currentTab === 'js') {
                try {
                    new Function(code);
                } catch (e) {
                    isValid = false;
                    message = 'Error de sintaxis JavaScript ‚ùå';
                }
            }

            addConsoleMessage(isValid ? 'log' : 'error', message);
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
